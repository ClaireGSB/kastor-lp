<?xml version="1.0" encoding="UTF-8"?>
<projectContext>
  <projectInfo>
  <name>nuxt-app</name>
  <dependencies>
    <dependency>
      <name>@mdi/font</name>
      <version>^7.4.47</version>
    </dependency>
    <dependency>
      <name>@nuxt/content</name>
      <version>2.13.4</version>
    </dependency>
    <dependency>
      <name>@nuxtjs/sitemap</name>
      <version>^7.0.2</version>
    </dependency>
    <dependency>
      <name>nuxt</name>
      <version>^3.15.1</version>
    </dependency>
    <dependency>
      <name>vue</name>
      <version>latest</version>
    </dependency>
    <dependency>
      <name>vue-router</name>
      <version>latest</version>
    </dependency>
  </dependencies>
</projectInfo>
  <fileTree>
    <![CDATA[
├── .DS_Store
├── .env
├── KASTOR_INTERNAL_DESCRIPTION.MD
├── LANDING_PAGE_STRUCTURE.md
├── README.md
├── app.vue
├── assets/
│   └── css/
│       └── global.css
├── components/
│   ├── BlogCard.vue
│   ├── BlogList.vue
│   ├── NavBar.vue
│   └── landingpage/
│       ├── Benefits.vue
│       ├── CTASection.vue
│       ├── ContentTypes.vue
│       ├── DemoVideo.vue
│       ├── EarlyAccessModal.vue
│       ├── HowItWorks.vue
│       └── ScrollCTA.vue
├── composables/
│   └── useDataLayer.ts
├── content/
│   └── blog/
│       ├── content-marketing/
│       │   └── testPost2.md
│       └── tutorials/
│           └── testPost.md
├── layouts/
│   ├── default.vue
│   └── landingpage.vue
├── nuxt.config.ts
├── package.json
├── pages/
│   ├── blog/
│   │   ├── [category]/
│   │   │   ├── [...slug].vue
│   │   │   └── index.vue
│   │   └── index.vue
│   └── index.vue
├── plugins/
│   └── vuetify.ts
├── project-context.xml
├── public/
│   ├── .DS_Store
│   ├── Kastor_square_dark_bg.svg
│   ├── Kastor_square_light_bg.svg
│   ├── Kastor_wordmark_dark_bg.svg
│   ├── Kastor_wordmark_light_bg.svg
│   ├── OG_image.png
│   ├── campaign-creation.png
│   ├── content-brief.png
│   ├── content-type.png
│   ├── favicon.ico
│   ├── final-blog.png
│   ├── kastor-demo-900.mp4
│   ├── kastor-demo.mp4
│   ├── robots.txt
│   ├── tweet-creation.png
│   └── voice-creation.png
├── server/
│   └── tsconfig.json
├── tsconfig.json
├── types/
│   ├── accessRequest.ts
│   └── global.d.ts
└── yarn.lock

    ]]>
  </fileTree>
  <fileContents>
    
          <file>
            <path>components/NavBar.vue</path>
            <content><![CDATA[<script setup lang="ts">
import { ref, onMounted, onUnmounted, inject, watch } from 'vue'
import { useDisplay } from 'vuetify'

// define prop optional:isblog
const props = defineProps({
  isBlog: {
    type: Boolean,
    default: false
  }
})

const isHydrated = ref(false)

const isScrolled = ref(false)
const showWhiteBg = ref(false)
const drawer = ref(false)

// Inject modal states and methods
const showBetaModal = inject('showBetaModal', ref(false))
const showWaitlistModal = inject('showWaitlistModal', ref(false))
const openBetaModal = inject('openBetaModal', () => {})
const openWaitlistModal = inject('openWaitlistModal', () => {})


const { width } = useDisplay()


const appBarHeight = 150 // Default v-app-bar height in pixels
const drawerWidth = computed(() => {
  // If mobile breakpoint (< 600px), return full width
  // Otherwise return default width (256px is Vuetify's default)
  return width.value < 700 ? width.value : 256
})

// Compute if any modal is open
const isAnyModalOpen = computed(() => showBetaModal.value || showWaitlistModal.value)


const handleScroll = () => {
  const isNowScrolled = window.scrollY > appBarHeight

  if (isNowScrolled !== isScrolled.value) {
    isScrolled.value = isNowScrolled
    updateBackground()
  }
}

const updateBackground = () => {
  // Show white background if either scrolled down or any modal is open
  if (isAnyModalOpen.value || isScrolled.value || props.isBlog) {
    showWhiteBg.value = true
  } else {
    // Only hide background if we're at the top and no modal is open
    showWhiteBg.value = false
  }
}

// Watch for changes in modal state
watch(isAnyModalOpen, () => {
  updateBackground()
}, { immediate: true })

// Add scroll event listener when component is mounted
onMounted(() => {
  handleScroll()
  updateBackground()
  // Small delay to ensure all Vuetify styles are applied
  setTimeout(() => {
    isHydrated.value = true
  }, 50)
  window.addEventListener('scroll', handleScroll)
})


// Clean up event listener when component is unmounted
onUnmounted(() => {
  window.removeEventListener('scroll', handleScroll)
})
</script>

<template>
  <!-- Navigation drawer for mobile -->
  <v-navigation-drawer
    v-model="drawer"
    location="right"
    :width="drawerWidth"
    temporary
  >

    <div class="drawer-header">
      <NuxtLink
        to="/"
        class="text-decoration-none drawer-logo pl-2"
        @click="drawer = false"
      >
        <img
          src="/Kastor_wordmark_light_bg.svg"
          alt="Kastor Logo"
          height="32"
          class="logo"
        />
      </NuxtLink>
      <v-btn
        icon="mdi-close"
        size="small"
        variant="text"
        @click="drawer = false"
        class="close-btn"
      ></v-btn>
    </div>

    <v-list>
      <v-list-item>
        <v-btn
          block
          color="secondary"
          class="navButton beta my-4"
          variant="elevated"
          size="x-large"
          @click="openBetaModal"
        >
          <v-icon start>mdi-rocket-launch</v-icon>
          Join Beta
        </v-btn>
      </v-list-item>

      <v-list-item>
        <v-btn
          block
          variant="outlined"
          size="x-large"
          class="navButton waitlist"
          :class="{ 'border-primary text-primary': showWhiteBg }"
          @click="openWaitlistModal"
        >
          <v-icon start>mdi-email-outline</v-icon>
          Join Waitlist
        </v-btn>
      </v-list-item>
    </v-list>
  </v-navigation-drawer>


  <v-app-bar
    :elevation="isScrolled || isBlog ? 1 : 0"
    scroll-behavior="hide"
    scroll-threshold="100"
    :class="{
      'bg-transparent': !showWhiteBg && !isBlog,
      'bg-white': showWhiteBg || isBlog,
      'bg-transition': true,
      'navbar-ready': isHydrated
    }"
  >
    <v-container class="navbar-content main-container">
      <!-- Logo section -->
      <v-app-bar-title class="flex-grow-0">
        <NuxtLink
          to="/"
          class="text-decoration-none d-flex align-center pl-4"
        >
          <img
            src="/Kastor_wordmark_light_bg.svg"
            alt="Kastor Logo"
            height="32"
            class="logo"
          />
        </NuxtLink>
      </v-app-bar-title>
      <v-spacer></v-spacer>

      <!-- Desktop buttons -->
      <div class="d-none d-md-flex button-container">
        <v-btn
          color="secondary"
          class="navButton beta"
          variant="elevated"
          @click="openBetaModal"
        >
          <v-icon start>mdi-rocket-launch</v-icon>
          Join Beta
        </v-btn>
        <v-btn
          variant="outlined"
          class="ml-6 navButton waitlist"
          :class="{ 'border-primary text-primary': showWhiteBg }"
          @click="openWaitlistModal"
        >
          <v-icon start>mdi-email-outline</v-icon>
          Join Waitlist
        </v-btn>
      </div>

      <!-- Mobile menu icon -->
      <v-app-bar-nav-icon
        class="d-md-none mobile-menu"
        @click="drawer = !drawer"
      ></v-app-bar-nav-icon>
    </v-container>
  </v-app-bar>
</template>

<style scoped>
/* Initial state - entire navbar content is invisible */
.navbar-content {
  display: flex !important;
  justify-content: space-between !important;
  align-items: center !important;
  opacity: 0;
  transition: opacity 0.3s ease;
}

/* After hydration - fade in everything */
.navbar-ready .navbar-content {
  opacity: 1;
}

/* Make logo area non-flexible */
.v-app-bar-title {
  flex: 0 0 auto !important;
}

.logo {
  height: 32px;
  width: auto;
  transition: opacity 0.3s ease;
  image-rendering: -webkit-optimize-contrast;
  image-rendering: crisp-edges;
  -webkit-font-smoothing: antialiased;
  shape-rendering: geometricPrecision;
  will-change: transform;
  stroke-width: 1px;
}

.bg-transition {
  transition: background-color 0.3s ease !important;
}


.opacity-0 {
  opacity: 0;
}

.navButton {
  text-transform: none;
  font-weight: 700;
  min-width: 170px;
  font-size: 1rem;
}

.navButton.waitlist {
  color: rgb(var(--v-theme-primary-darken-1)) !important;
  border: 2px solid rgb(var(--v-theme-primary)) !important;
  background-color: white !important;
}


.v-navigation-drawer .navButton {
  width: 100%;
  margin: 0;
}

.v-toolbar-title {
  /* logo width + some padding */
  min-width: 200px;
}

.drawer-header {
  padding: 1rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
  position: sticky;
  top: 0;
  background: white;
  z-index: 1;
  border-bottom: 1px solid rgba(0, 0, 0, 0.12);
}

/* Responsive adjustments */
@media (max-width: 960px) {
  .v-btn {
    padding: 0 12px !important;
  }

  .v-divider {
    display: none;
  }
}

@media (max-width: 600px) {
  .main-container {
    padding: 0 0.5rem;
  }

}
</style>
]]></content>
          </file>
        
          <file>
            <path>layouts/default.vue</path>
            <content><![CDATA[<template>
  <v-app>
    <NavBar :isBlog="true"/>

    <v-main>
      <v-container>
        <slot />
      </v-container>
    </v-main>

    <v-footer app>
      <v-container>
        <div class="text-center">
          © {{ new Date().getFullYear() }} Kastor
        </div>
      </v-container>
    </v-footer>
  </v-app>
</template>


<style>
.v-main {
  padding-top: 68px !important;
  font-size: 1.125rem;
}
</style>]]></content>
          </file>
        
          <file>
            <path>pages/blog/[category]/[...slug].vue</path>
            <content><![CDATA[<script setup>
const { path } = useRoute()
const { data } = await useAsyncData(`content-${path}`, () => queryContent(path).findOne())
</script>

<template>
  <article>
    <v-btn
      :to="`/blog/${path.split('/')[2]}`"
      prepend-icon="mdi-arrow-left"
      variant="text"
      class="mb-4"
    >
      Back to Category
    </v-btn>

    <div v-if="data">
      <h1 class="text-h2 mb-4">{{ data.title }}</h1>
      
      <div class="d-flex align-center mb-6">
        <v-chip>{{ path.split('/')[2] }}</v-chip>
        <div class="ml-4 text-subtitle-1">
          {{ new Date(data.date).toLocaleDateString() }}
        </div>
      </div>

      <div class="prose">
        <ContentRenderer :value="data" />
      </div>
    </div>
  </article>
</template>

<style>
.prose {
  max-width: 65ch;
  margin: 0 auto;
}

.prose img {
  max-width: 100%;
  height: auto;
}

.prose h2 {
  margin-top: 2em;
  margin-bottom: 1em;
}

.prose p {
  margin-bottom: 1.5em;
  line-height: 1.6;
}
</style>
]]></content>
          </file>
        
          <file>
            <path>pages/blog/[category]/index.vue</path>
            <content><![CDATA[<script setup>
const route = useRoute()
const category = route.params.category

const { data: articles } = await useAsyncData(
  `articles-${category}`,
  () => queryContent('blog', category).find()
)
</script>

<template>
  <div>
    <v-btn
      to="/blog"
      prepend-icon="mdi-arrow-left"
      variant="text"
      class="mb-4"
    >
      Back to Blog
    </v-btn>

    <h1 class="text-h2 mb-6 text-capitalize">{{ category }}</h1>

    <v-row>
      <v-col
        v-for="article in articles"
        :key="article._path"
        cols="12"
        md="6"
        lg="4"
      >
        <v-card :to="article._path" height="100%">
          <v-card-title>{{ article.title }}</v-card-title>
          <v-card-subtitle>{{ new Date(article.date).toLocaleDateString() }}</v-card-subtitle>
          <v-card-text>
            {{ article.description }}
          </v-card-text>
        </v-card>
      </v-col>
    </v-row>
  </div>
</template>
]]></content>
          </file>
        
          <file>
            <path>pages/blog/index.vue</path>
            <content><![CDATA[<script setup>
const { data: articles } = await useAsyncData('articles', () => queryContent('blog').find(), {
  // Add cache options
  watch: true,
  // Refresh on route change
  refresh: true
});
const categories = [...new Set(articles.value.map(article => article._path.split('/')[2]))]
</script>

<template>
  <div>
    <h1 class="text-h2 mb-6">Blog</h1>
    
    <!-- Categories -->
    <v-row class="mb-6">
      <v-col>
        <v-chip-group>
          <v-chip
            v-for="category in categories"
            :key="category"
            :to="`/blog/${category}`"
            link
          >
            {{ category }}
          </v-chip>
        </v-chip-group>
      </v-col>
    </v-row>

    <!-- Articles -->
    <v-row>
      <v-col
        v-for="article in articles"
        :key="article._path"
        cols="12"
        md="6"
        lg="4"
      >
        <v-card :to="article._path" height="100%">
          <v-card-title>{{ article.title }}</v-card-title>
          <v-card-subtitle>{{ new Date(article.date).toLocaleDateString() }}</v-card-subtitle>
          <v-card-text>
            {{ article.description }}
          </v-card-text>
        </v-card>
      </v-col>
    </v-row>
  </div>
</template>
]]></content>
          </file>
        
          <file>
            <path>plugins/vuetify.ts</path>
            <content><![CDATA[// import this after install `@mdi/font` package
import '@mdi/font/css/materialdesignicons.css'

import 'vuetify/styles'
import { createVuetify } from 'vuetify'
import { defineNuxtPlugin } from '#app'

const myCustomLightTheme = {
  dark: false,
  colors: {
    background: '#FFFFFF',
    surface: '#FFFFFF',
    'surface-bright': '#FFFFFF',
    'surface-light': '#F5F7F8',    // Slightly blue-tinted light gray for subtle depth
    'surface-variant': '#EC407A',   // pink for tooltips
    'on-surface-variant': '#FFFFFF', // white for text on pink surfaces
    'surface-dark': '#2D3436',      // Charcoal for navbars and navdrawers

    // Primary (Teal) family
    'primary-lighten-4': '#F7FDFE',
    'primary-lighten-3': '#E0F7FA',
    'primary-lighten-2': '#80DEEB',
    'primary-lighten-1': '#26C6DA',
    'primary': '#00B3C5',
    'primary-darken-1': '#007A8A',
    'primary-darken-2': '#005D6B',
    'primary-darken-3': '#00424D',
    'primary-darken-4': '#002A33',

    // Secondary (Pink) family
    'secondary-lighten-3': '#FCE4EC',  // Very pale pink
    'secondary-lighten-2': '#FFA4C1',
    'secondary-lighten-1': '#FF719B',
    'secondary': '#EC407A',
    'secondary-darken-1': '#D81B60',
    'secondary-darken-2': '#B0003A',

    // Tertiary (Yellow) family
    'tertiary-lighten-3': '#FFF8E1',  // Very pale yellow
    'tertiary-lighten-2': '#FFE082',
    'tertiary-lighten-1': '#FFD54F',
    'tertiary': '#FFB300',
    'tertiary-darken-1': '#FB8C00',
    'tertiary-darken-2': '#EF6C00',

    error: '#FF4D4D',     
    info: '#0099E6',      
    success: '#00B894',   
    warning: '#FF9800'   
  },
  variables: {
    'border-color': '#000000',
    'border-opacity': 0.12,
    'high-emphasis-opacity': 0.87,
    'medium-emphasis-opacity': 0.60,
    'disabled-opacity': 0.38,
    'idle-opacity': 0.04,
    'hover-opacity': 0.04,
    'focus-opacity': 0.12,
    'selected-opacity': 0.08,
    'activated-opacity': 0.12,
    'pressed-opacity': 0.12,
    'dragged-opacity': 0.08,
    'theme-kbd': '#212529',
    'theme-on-kbd': '#FFFFFF',
    'theme-code': '#F5F5F5',
    'theme-on-code': '#000000',
  }
}

export default defineNuxtPlugin((app) => {
  const vuetify = createVuetify({
    ssr: true,
    theme: {
      defaultTheme: 'myCustomLightTheme',
      themes: {
        myCustomLightTheme,
      },
    },
  })
  app.vueApp.use(vuetify)
})
]]></content>
          </file>
        
  </fileContents>
</projectContext>