<?xml version="1.0" encoding="UTF-8"?>
<projectContext>
  <projectInfo>
  <name>nuxt-app</name>
  <dependencies>
    <dependency>
      <name>@mdi/font</name>
      <version>^7.4.47</version>
    </dependency>
    <dependency>
      <name>@nuxt/content</name>
      <version>2.13.4</version>
    </dependency>
    <dependency>
      <name>@nuxtjs/sitemap</name>
      <version>^7.0.2</version>
    </dependency>
    <dependency>
      <name>nuxt</name>
      <version>^3.15.1</version>
    </dependency>
    <dependency>
      <name>vue</name>
      <version>latest</version>
    </dependency>
    <dependency>
      <name>vue-router</name>
      <version>latest</version>
    </dependency>
  </dependencies>
</projectInfo>
  <fileTree>
    <![CDATA[
├── .DS_Store
├── .env
├── KASTOR_INTERNAL_DESCRIPTION.MD
├── LANDING_PAGE_STRUCTURE.md
├── README.md
├── app.vue
├── components/
│   ├── BlogCard.vue
│   ├── BlogList.vue
│   ├── NavBar.vue
│   └── landingpage/
│       ├── Benefits.vue
│       ├── CTASection.vue
│       ├── ContentTypes.vue
│       ├── DemoVideo.vue
│       ├── EarlyAccessModal.vue
│       ├── HowItWorks.vue
│       └── ScrollCTA.vue
├── content/
│   └── blog/
│       ├── content-marketing/
│       │   └── testPost2.md
│       └── tutorials/
│           └── testPost.md
├── draft-pages/
│   └── blog/
│       ├── [category]/
│       │   ├── [...slug].vue
│       │   └── index.vue
│       └── index.vue
├── layouts/
│   └── default.vue
├── nuxt.config.ts
├── package.json
├── pages/
│   └── index.vue
├── plugins/
│   └── vuetify.ts
├── project-context.xml
├── public/
│   ├── .DS_Store
│   ├── Kastor_square_dark_bg.svg
│   ├── Kastor_square_light_bg.svg
│   ├── Kastor_wordmark_dark_bg.svg
│   ├── Kastor_wordmark_light_bg.svg
│   ├── campaign-creation.png
│   ├── content-brief.png
│   ├── content-type.png
│   ├── favicon.ico
│   ├── final-blog.png
│   ├── kastor-demo-900.mp4
│   ├── kastor-demo.mp4
│   ├── robots.txt
│   ├── tweet-creation.png
│   └── voice-creation.png
├── server/
│   └── tsconfig.json
├── tsconfig.json
├── types/
│   └── accessRequest.ts
└── yarn.lock

    ]]>
  </fileTree>
  <fileContents>
    
          <file>
            <path>app.vue</path>
            <content><![CDATA[<template>
  <NuxtLayout>
    <v-app>
      <NuxtPage />
    </v-app>
  </NuxtLayout>
</template>

<script setup>
// Add GTM script to head
useHead({
  script: [
    {
      children: `(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-MTWJQJ5V');`,
      tagPriority: 'high'
    }
  ],
  noscript: [
    {
      children: `<iframe src="https://www.googletagmanager.com/ns.html?id=GTM-MTWJQJ5V"
height="0" width="0" style="display:none;visibility:hidden"></iframe>`,
      tagPosition: 'bodyOpen'
    }
  ]
})

</script>
]]></content>
          </file>
        
          <file>
            <path>components/NavBar.vue</path>
            <content><![CDATA[<script setup lang="ts">
import { ref, onMounted, onUnmounted } from 'vue'
import { AccessRequestType } from '~/types/accessRequest'

const isScrolled = ref(false)
const showWhiteBg = ref(false)
const showBetaModal = ref(false)
const showWaitlistModal = ref(false)
const drawer = ref(false)

import { useDisplay } from 'vuetify'

const { width } = useDisplay()

const appBarHeight = 150 // Default v-app-bar height in pixels
const drawerWidth = computed(() => {
  // If mobile breakpoint (< 600px), return full width
  // Otherwise return default width (256px is Vuetify's default)
  return width.value < 700 ? width.value : 256
})


const handleScroll = () => {
  const isNowScrolled = window.scrollY > appBarHeight

  if (isNowScrolled !== isScrolled.value) {
    isScrolled.value = isNowScrolled

    if (!isNowScrolled) {
      // When scrolling back to top, remove dark bg immediately
      showWhiteBg.value = false
    } else {
      // When scrolling down, delay the dark bg slightly
      setTimeout(() => {
        if (isScrolled.value) { // Check if still scrolled
          showWhiteBg.value = true
        }
        // Adjust this timing to match your hide animation
      }, 150)
    }
  }
}

// Add scroll event listener when component is mounted
onMounted(() => {
  handleScroll()
  window.addEventListener('scroll', handleScroll)
})


// Clean up event listener when component is unmounted
onUnmounted(() => {
  window.removeEventListener('scroll', handleScroll)
})
</script>

<template>
  <!-- Navigation drawer for mobile -->
  <v-navigation-drawer
    v-model="drawer"
    location="right"
    :width="drawerWidth"
    temporary
  >

    <div class="drawer-header">
      <NuxtLink
        to="/"
        class="text-decoration-none drawer-logo pl-2"
        @click="drawer = false"
      >
        <img
          src="/Kastor_wordmark_light_bg.svg"
          alt="Kastor Logo"
          height="32"
          class="logo"
        />
      </NuxtLink>
      <v-btn
        icon="mdi-close"
        size="small"
        variant="text"
        @click="drawer = false"
        class="close-btn"
      ></v-btn>
    </div>

    <v-list>
      <v-list-item>
        <v-btn
          block
          color="secondary"
          class="navButton beta my-4"
          variant="elevated"
          size="x-large"
          @click="showBetaModal = true"
        >
          <v-icon start>mdi-rocket-launch</v-icon>
          Join Beta
        </v-btn>
      </v-list-item>

      <v-list-item>
        <v-btn
          block
          variant="outlined"
          size="x-large"
          class="navButton waitlist"
          :class="{ 'border-primary text-primary': showWhiteBg }"
          @click="showWaitlistModal = true"
        >
          <v-icon start>mdi-email-outline</v-icon>
          Join Waitlist
        </v-btn>
      </v-list-item>
    </v-list>
  </v-navigation-drawer>


  <v-app-bar
    :elevation="isScrolled ? 1 : 0"
    scroll-behavior="hide"
    scroll-threshold="100"
    :class="{
      'bg-transparent': !showWhiteBg,
      'bg-white': showWhiteBg,
      'bg-transition': true
    }"
  >
    <v-container class="d-flex align-center main-container">
      <v-app-bar-title>
        <NuxtLink
          to="/"
          class="text-decoration-none d-flex align-center pl-4"
        >
          <img
            src="/Kastor_wordmark_light_bg.svg"
            alt="Kastor Logo"
            height="32"
            class="logo"
          />
        </NuxtLink>
      </v-app-bar-title>
      <v-spacer></v-spacer>

      <!-- Desktop buttons -->
      <div class="d-none d-md-flex">
        <v-btn
          color="secondary"
          class="navButton beta"
          variant="elevated"
          @click="showBetaModal = true"
        >
          <v-icon start>mdi-rocket-launch</v-icon>
          Join Beta
        </v-btn>
        <v-btn
          variant="outlined"
          class="ml-6 navButton waitlist"
          :class="{ 'border-primary text-primary': showWhiteBg }"
          @click="showWaitlistModal = true"
        >
          <v-icon start>mdi-email-outline</v-icon>
          Join Waitlist
        </v-btn>
      </div>

      <!-- Mobile menu icon -->
      <v-app-bar-nav-icon
        class="d-md-none"
        @click="drawer = !drawer"
      ></v-app-bar-nav-icon>
    </v-container>

    <!-- Modals -->
    <landingpageEarlyAccessModal
      v-model="showBetaModal"
      :type="AccessRequestType.beta_access"
    />
    <landingpageEarlyAccessModal
      v-model="showWaitlistModal"
      :type="AccessRequestType.ga_waitlist"
    />
  </v-app-bar>
</template>

<style scoped>
.main-container {
  max-width: 1200px !important;
  margin-left: auto !important;
  margin-right: auto !important;
  width: 100%;
  padding: 0 1rem;
}

.logo {
  height: 32px;
  width: auto;
  transition: opacity 0.3s ease;
  image-rendering: -webkit-optimize-contrast;
  image-rendering: crisp-edges;
  -webkit-font-smoothing: antialiased;
  shape-rendering: geometricPrecision;
  will-change: transform;
  stroke-width: 1px;
}

.bg-transition {
  transition: background-color 0.3s ease !important;
}


.opacity-0 {
  opacity: 0;
}

.navButton {
  text-transform: none;
  font-weight: 700;
  min-width: 170px;
  font-size: 1rem;
}

.navButton.waitlist {
  color: rgb(var(--v-theme-primary-darken-1)) !important;
  border: 2px solid rgb(var(--v-theme-primary)) !important;
  background-color: white !important;
}


.v-navigation-drawer .navButton {
  width: 100%;
  margin: 0;
}

.v-toolbar-title {
  /* logo width + some padding */
  min-width: 200px;
}

.drawer-header {
  padding: 1rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
  position: sticky;
  top: 0;
  background: white;
  z-index: 1;
  border-bottom: 1px solid rgba(0, 0, 0, 0.12);
}

/* Responsive adjustments */
@media (max-width: 960px) {
  .v-btn {
    padding: 0 12px !important;
  }

  .v-divider {
    display: none;
  }
}

@media (max-width: 600px) {
  .main-container {
    padding: 0 0.5rem;
  }

}
</style>
]]></content>
          </file>
        
          <file>
            <path>components/landingpage/CTASection.vue</path>
            <content><![CDATA[<script setup lang="ts">
interface CTAOption {
  title: string;
  buttonText: string;
  buttonColor: string;
  benefits: string[];
  type: 'beta' | 'waitlist';
}

const props = defineProps<{
  title?: string;
}>();

const emit = defineEmits<{
  (e: 'showBetaModal'): void;
  (e: 'showWaitlistModal'): void;
}>();

const ctaOptions: CTAOption[] = [
  {
    title: 'Get Beta Access',
    buttonText: 'Apply for Beta Access',
    buttonColor: 'tertiary-darken-1',
    benefits: [
      'Use Kastor for free during the beta',
      'Help shape the product',
      'Early access to all features',
      // 'Limited spots available'
    ],
    type: 'beta'
  },
  {
    title: 'Join the Waitlist',
    buttonText: 'Join Waitlist',
    buttonColor: 'secondary',
    benefits: [
      'Be first to know when we launch',
      'Get exclusive early-bird pricing',
      'Stay updated on our progress',
      // ''
    ],
    type: 'waitlist'
  }
];

const handleClick = (type: 'beta' | 'waitlist') => {
  if (type === 'beta') {
    emit('showBetaModal');
  } else {
    emit('showWaitlistModal');
  }
};
</script>

<template>
  <v-container
    fluid
    class="bg-primary py-16"
  >
    <div class="main-container cta-section">
      <h2 class="text-h3 text-white text-center mb-12 font-weight-bold">
        {{ title || 'Join Kastor Early' }}
      </h2>
      <v-row class="justify-center">
        <v-col
          v-for="option in ctaOptions"
          :key="option.type"
          cols="12"
          sm="6"
          md="5"
          class="px-4"
        >
          <v-card
            class="h-100 elevation-3"
            rounded="lg"
            :class="option.type"
          >
            <v-card-item class="pa-8">
              <div class="text-center">
                <h3 class="text-h5 font-weight-bold mb-6">{{ option.title }}</h3>
              </div>
              <div class="d-flex justify-center">
                <v-list
                  class="bg-transparent"
                  max-width="350px"
                >
                  <v-list-item
                    v-for="(benefit, i) in option.benefits"
                    :key="i"
                    :title="benefit"
                    :slim="true"
                  >
                    <template v-slot:prepend>
                      <v-icon :color="option.buttonColor">
                        mdi-check-circle
                      </v-icon>
                    </template>
                  </v-list-item>
                </v-list>
              </div>
              <div class="d-flex justify-center">
                <v-btn
                  :color="option.buttonColor"
                  class="mt-8 text-button-large w-75"
                  :class="option.type"
                  height="56"
                  @click="handleClick(option.type)"
                >
                  {{ option.buttonText }}
                </v-btn>
              </div>
            </v-card-item>
          </v-card>
        </v-col>
      </v-row>
    </div>
  </v-container>
</template>

<style scoped>
.text-button-large {
  font-size: 1.1rem;
  letter-spacing: 0.5px;
  text-transform: none;
  font-weight: 700;
  padding: 0 32px;
  min-width: 250px;
}


/* .waitlist .v-list-item:last-child .v-icon {
  display: none;
} */

@media (max-width: 600px) {
  .text-button-large {
    min-width: 300px;
  }
}
</style>
]]></content>
          </file>
        
          <file>
            <path>components/landingpage/EarlyAccessModal.vue</path>
            <content><![CDATA[<!-- components/EarlyAccessModal.vue -->
<template>
  <v-dialog
    v-model="dialog"
    width="500"
    persistent
    :scrim="loading ? '#000000' : undefined"
  >
    <v-card class="auth-card pb-8">
      <!-- Close button -->
      <v-btn
        icon="mdi-close"
        variant="text"
        size="small"
        class="close-btn"
        @click="handleClose"
        :disabled="loading"
      ></v-btn>

      <!-- Step 1: Email Collection -->
      <v-card-title
        v-if="!submitted"
        class="text-center text-h5 font-weight-bold pt-6 pb-8"
      >
        {{ type === 'beta_access' ? 'Join the Beta for Free' : 'Join the Waitlist' }}
      </v-card-title>

      <v-card-text class="px-4 py-2">
        <!-- Step 1: Email Form -->
        <v-form
          v-if="!submitted"
          @submit.prevent="handleEmailSubmit"
          v-model="isEmailValid"
        >
          <v-text-field
            v-model="email"
            label="Email"
            type="email"
            :rules="[rules.required, rules.email]"
            required
            variant="outlined"
            density="compact"
            bg-color="grey-lighten-5"
            :disabled="loading"
          />
          <p class="text-caption text-medium-emphasis mb-8">
            We'll never share your email or send you spam.
          </p>

          <v-alert
            v-if="error"
            type="error"
            variant="tonal"
            class="my-2"
            density="compact"
            closable
          >
            {{ error }}
          </v-alert>

          <v-btn
            block
            color='primary'
            type="submit"
            size="large"
            :loading="loading"
            :disabled="!isEmailValid"
            class="mt-12 px-6"
            :class="{
              'submit-email-beta': type === 'beta_access',
              'submit-email-waitlist': type !== 'beta_access'
             }"
          >
            {{ type === 'beta_access' ? 'Apply for Beta Access' : 'Join Waitlist' }}
          </v-btn>
        </v-form>

        <!-- Step 2: Additional Details -->
        <v-form
          v-else
          @submit.prevent="handleDetailsSubmit"
          class="details-form"
        >
          <div
            v-if="!detailsSubmitted"
            class="text-center mb-6"
          >
            <v-icon
              color="success"
              size="64"
              icon="mdi-check-circle"
              class="mb-4"
            />
            <h3 class="text-h5 font-weight-bold mb-2">Thank you!</h3>
            <p
              class="text-body-1 text-medium-emphasis"
              v-html="detailsMessage"
            ></p>
          </div>

          <div
            v-else
            class="text-center"
          >
            <v-icon
              color="success"
              size="64"
              icon="mdi-check-circle"
              class="mb-4"
            />
            <h3 class="text-h5 font-weight-bold mb-2">Thank you!</h3>
            <p class="text-body-1 text-medium-emphasis">{{ finalMessage }}</p>
          </div>

          <template v-if="!detailsSubmitted">
            <v-textarea
              v-model="applicationDetails"
              label="Your message"
              variant="outlined"
              density="comfortable"
              rows="4"
              :disabled="detailsSubmitted || loading"
              class="mb-4"
              :counter="DETAILS_LIMIT"
              :rules="[rules.detailsLimit]"
              @input="applicationDetails = ($event.target as HTMLTextAreaElement).value.slice(0, DETAILS_LIMIT)"
            />

            <v-btn
              v-if="!detailsSubmitted"
              block
              color="primary"
              type="submit"
              size="large"
              :loading="loading"
              class="px-6 mt-12"
              :class="{
              'submit-details-beta': type === 'beta_access',
              'submit-details-waitlist': type !== 'beta_access'
             }"
            >
              Submit Additional Details
            </v-btn>
          </template>
        </v-form>
      </v-card-text>
    </v-card>
  </v-dialog>
</template>


<script setup lang="ts">
import { ref } from 'vue'
import { AccessRequestType } from '~/types/accessRequest'


const props = defineProps<{
  modelValue: boolean
  type: AccessRequestType
}>()

const emit = defineEmits<{
  'update:modelValue': [value: boolean]
}>()

// Form state
const dialog = computed({
  get: () => props.modelValue,
  set: (value) => emit('update:modelValue', value)
})
const email = ref('')
const applicationDetails = ref('')
const loading = ref(false)
const error = ref('')
const isEmailValid = ref(false)
const submitted = ref(false)
const detailsSubmitted = ref(false)
const DETAILS_LIMIT = 1000;

const runtimeConfig = useRuntimeConfig()
const API_BASE_URL = runtimeConfig.public.apiBase


// Form validation rules
const rules = {
  required: (v: string) => !!v || 'This field is required',
  email: (v: string) => /.+@.+\..+/.test(v) || 'Please enter a valid email',
  detailsLimit: (v: string) => v.length <= DETAILS_LIMIT || `Maximum ${DETAILS_LIMIT} characters`
}

const benefits = computed(() => {
  return props.type === AccessRequestType.beta_access
    ? [
      'Use Kastor for free during the beta',
      'Help shape the product',
      'Early access to all features',
    ]
    : [
      'Be first to know when we launch',
      'Get exclusive early-bird pricing',
      'Stay updated on our progress'
    ]
})

const benefitsColor = computed(() => {
  return props.type === AccessRequestType.beta_access
    ? 'tertiary-darken-1'
    : 'secondary'
})


const waitlistDetailsMessage = `
    We'll notify you when we launch. <br>
    Optionally: please tell us why you're excited to use Kastor!
`

const betaDetailsMessage = `
    Please tell us why you're interested and how you'd be planning on using Kastor.
`

const detailsMessage = computed(() => {
  return props.type === AccessRequestType.beta_access ? betaDetailsMessage : waitlistDetailsMessage
})

const finalMessage = computed(() => {
  return props.type === AccessRequestType.beta_access
    ? "We'll review your application and get back to you within 48 hours."
    : "We'll notify you when we launch."
})

// Handle initial email submission
async function handleEmailSubmit() {
  if (!isEmailValid.value) return

  loading.value = true
  error.value = ''

  try {
    const response = await fetch(`${API_BASE_URL}/api/early-access-request/create`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: email.value,
        request_type: props.type
      })
    })

    if (!response.ok) throw new Error('Failed to submit request')

    submitted.value = true
  } catch (e) {
    error.value = 'Something went wrong. Please try again.'
    console.error('Error submitting email:', e)
  } finally {
    loading.value = false
  }
}

// Handle additional details submission
async function handleDetailsSubmit() {
  if (!applicationDetails.value) return

  loading.value = true
  error.value = ''

  try {
    const response = await fetch(`${API_BASE_URL}/api/early-access-request/update`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: email.value,
        application_details: applicationDetails.value
      })
    })

    if (!response.ok) throw new Error('Failed to submit details')

    detailsSubmitted.value = true
  } catch (e) {
    error.value = 'Something went wrong. Please try again.'
    console.error('Error submitting details:', e)
  } finally {
    loading.value = false
  }
}

// Handle dialog close
function handleClose() {
  dialog.value = false
  // Reset form state after animation completes
  setTimeout(() => {
    email.value = ''
    applicationDetails.value = ''
    error.value = ''
    submitted.value = false
    detailsSubmitted.value = false
  }, 300)
}
</script>

<style scoped>
.auth-card {
  border-radius: 16px;
  box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1) !important;
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.1);
  overflow: hidden;
  padding-left: 24px;
  padding-right: 24px;
}

.modal-gradient {
  background: linear-gradient(135deg,
      rgb(255, 255, 255) 0%,
      rgb(248, 250, 252) 100%);
}

.close-btn {
  position: absolute;
  top: 8px;
  right: 8px;
  z-index: 1;
}

.details-form {
  animation: fadeIn 0.3s ease-out;
}


@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }

  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Improved Typography */
.v-card-title {
  letter-spacing: -0.5px;
}

.auth-card .v-card-title {
  padding-left: 4px;
  padding-right: 4px;
}

.v-card-text {
  padding-top: 24px;
  padding-bottom: 24px;

}

@media (max-width: 700px) {
  .auth-card {
    padding-left: 4px;
    padding-right: 4px;
  }

  .v-dialog {
    margin: 0px;
    width: 100%;
  }

  .v-card-text {
    padding: 16px;
  }
}
</style>
]]></content>
          </file>
        
          <file>
            <path>layouts/default.vue</path>
            <content><![CDATA[<script setup lang="ts">
</script>

<template>
  <v-app>
    <NavBar />

    <v-main>
      <slot />
    </v-main>

    <v-footer class="bg-primary">
      <v-container>
        <div class="bg-primary">
          © {{ new Date().getFullYear() }} Kastor
        </div>
      </v-container>
    </v-footer>
  </v-app>
</template>

<style>
.main-container {
  max-width: 1200px !important;
  margin-left: auto !important;
  margin-right: auto !important;
  width: 100%;
  padding: 0 1rem;
}

@media (max-width: 600px) {
  .main-container {
    padding: 0 0.5rem;
  }
}

.v-main {
  padding-top: 0px !important;
  font-size: 1.125rem;
}

.v-container main-container {
  max-width: 1200px;
}
</style>]]></content>
          </file>
        
          <file>
            <path>pages/index.vue</path>
            <content><![CDATA[<script setup lang="ts">
import { ref, onMounted } from 'vue';
import { AccessRequestType } from '~/types/accessRequest';

useSeoMeta({
  title: 'Kastor AI | Instant, Authentic Social Media & Blog Content',
  ogTitle: 'Instant, Authentic Social Media & Blog Content',
  description: 'Effortlessly create social posts and blogs that actually sound like you. From idea to authentic posts in seconds - get results across Twitter, LinkedIn, SEO and email. Try it free.',
  ogDescription: 'Effortlessly create social posts and blogs that actually sound like you. From idea to authentic posts in seconds - get results across Twitter, LinkedIn, SEO and email. Try it free.',
  // ogImage: 'https://example.com/image.png',
  // twitterCard: 'summary_large_image',
})


// Interfaces

interface UserType {
  title: string;
  benefits: string[];
}

// Create const object for template use
const requestTypes = {
  beta: AccessRequestType.beta_access,
  waitlist: AccessRequestType.ga_waitlist
} as const;

// Modal state
const showBetaModal = ref(false);
const showWaitlistModal = ref(false);

// Hero section rotating content
const rotatingContent = ['Tweets', 'LinkedIn Posts', 'Blog Posts', 'Marketing Emails'];
const currentTypeIndex = ref(0);

// User types data
const userTypes: UserType[] = [
  {
    title: 'Creators & Solopreneurs',
    benefits: [
      'Create content for social, email, and blog without the time sink',
      'Keep your authentic voice while growing your following',
      'Get real marketing results without hiring a team'
    ]
  },
  {
    title: 'Marketing Teams',
    benefits: [
      'Get everyone writing in your brand\'s voice from day one',
      'Keep quality high even during product launches and events',
      'Scale content creation without scaling your team'
    ]
  }
];

// Rotate through content types
onMounted(() => {
  setInterval(() => {
    currentTypeIndex.value = (currentTypeIndex.value + 1) % rotatingContent.length;
  }, 3000);
});
</script>

<template>
  <div>
    <!-- Hero Section -->
    <v-container
      fluid
      class="hero-section"
    >
      <div class="hero-background"></div>
      <div class="hero-content main-container text-center">
        <h1 class="hero-title">
          <div class="rotating-container">
            <transition
              name="fade-slide"
              mode="out-in"
            >
              <div
                :key="currentTypeIndex"
                class="gradient-text rotating-text text-secondary"
              >
                {{ rotatingContent[currentTypeIndex] }}
              </div>
            </transition>
          </div>
          <div class="text-center mt-2">That Sound Like You</div>
        </h1>
        <h2 class="text-h4 font-weight-regular white--text mt-12 mb-16 hero-subtitle">
          From idea to authentic posts in seconds. <br> Get results across Twitter, LinkedIn, SEO and email<br>in just
          minutes per week.
        </h2>
        <div class="d-flex flex-wrap justify-center ga-4 hero-cta">
          <v-btn
            size="x-large"
            color="secondary"
            elevation="4"
            class="text-button-large beta"
            :ripple="false"
            @click="showBetaModal = true"
          >
            <v-icon start>mdi-rocket-launch</v-icon>
            Join the Beta
          </v-btn>
          <v-btn
            size="x-large"
            variant="flat"
            class="text-button-large waitlist-button waitlist"
            :ripple="false"
            @click="showWaitlistModal = true"
          >
            <v-icon start>mdi-email-outline</v-icon>
            Join Waitlist
          </v-btn>
        </div>
      </div>
    </v-container>

    <landingpageBenefits />
    <landingpageDemoVideo />
    <landingpageScrollCTA />
    <landingpageHowItWorks />
    <landingpageScrollCTA />
    <landingpageContentTypes />



    <!-- Who Uses Kastor -->
    <v-container
      fluid
      class="py-16"
    >
      <div class="main-container">
        <h2 class="text-h3 text-center font-weight-black mb-12">Who Uses Kastor</h2>
        <v-row>
          <v-col
            v-for="user in userTypes"
            :key="user.title"
            cols="12"
            md="6"
          >
            <v-card class="h-100">
              <v-card-item>
                <h3 class="text-h5 font-weight-bold mb-4">{{ user.title }}</h3>
                <v-list>
                  <v-list-item
                    v-for="(benefit, index) in user.benefits"
                    :key="index"
                    :title="benefit"
                    density="comfortable"
                  >
                    <template v-slot:prepend>
                      <v-icon
                        color="secondary"
                        size="small"
                      >mdi-check-circle</v-icon>
                    </template>
                  </v-list-item>
                </v-list>
              </v-card-item>
            </v-card>
          </v-col>
        </v-row>
      </div>
    </v-container>

    <landingpageCTASection
      @showBetaModal="showBetaModal = true"
      @showWaitlistModal="showWaitlistModal = true"
    />

    <!-- Early Access Modals -->
    <landingpageEarlyAccessModal
      v-model="showBetaModal"
      :type="AccessRequestType.beta_access"
    />
    <landingpageEarlyAccessModal
      v-model="showWaitlistModal"
      :type="AccessRequestType.ga_waitlist"
    />
  </div>
</template>

<style scoped>
.hero-section {
  position: relative;
  padding: 200px 0 120px 0;
  background: linear-gradient(135deg,
      rgb(138, 220, 235),
      rgb(178, 242, 245));
  overflow: hidden;
}

.hero-background {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  /* Softer overlays with very light colors */
  background-image:
    radial-gradient(circle at 20% 20%, rgba(224, 247, 250, 0.7) 0%, transparent 50%),
    radial-gradient(circle at 90% 90%, rgba(247, 253, 254, 0.7) 0%, transparent 50%);
  z-index: 1;
}


.hero-content {
  position: relative;
  z-index: 2;
}

.hero-title {
  font-size: clamp(2.5rem, 5vw, 4rem);
  line-height: 1.3;
  letter-spacing: -0.02em;
  color: rgb(0, 66, 77);
}


.hero-title-wrapper {
  position: relative;
  height: 1.2em;
  margin-bottom: 0.5em;
  display: flex;
  justify-content: center;
  align-items: center;
}

.hero-title-line {
  margin-top: 0.2em;
}

.fixed-text {
  position: absolute;
  left: 50%;
  transform: translateX(calc(-50% - 140px));
  /* Half of rotating-text-container width */
}

.hero-cta .v-btn.v-btn--outlined {
  border-color: rgb(0, 179, 197);
  /* primary */
  color: rgb(0, 179, 197);
  /* primary */
}

.hero-subtitle {
  font-size: clamp(1.25rem, 2vw, 1.5rem);
  opacity: 0.9;
  color: rgb(0, 93, 107);
  line-height: 1.5;
}

/* Rotating text animations */
.rotating-container {
  height: 1.3em;
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 0.2em 0;
}

.rotating-text {
  font-weight: 700;
  white-space: nowrap;
}


.text-button-large {
  font-size: 1.1rem;
  letter-spacing: 0.5px;
  text-transform: none;
  font-weight: 700;
  padding: 0 32px;
  min-width: 250px;
}

.waitlist-button {
  color: rgb(var(--v-theme-secondary)) !important;
  border: 2px solid rgb(var(--v-theme-secondary)) !important;
  background-color: white !important;
}

ul.list-none {
  list-style: none;
  padding: 0;
}

/* Smooth fade-slide transition */
.fade-slide-enter-active,
.fade-slide-leave-active {
  transition: all 0.5s ease;
}

.fade-slide-enter-from {
  opacity: 0;
  transform: translateY(-20px);
}

.fade-slide-leave-to {
  opacity: 0;
  transform: translateY(20px);
}

@keyframes float {
  0% {
    transform: translateY(0px);
  }

  50% {
    transform: translateY(-10px);
  }

  100% {
    transform: translateY(0px);
  }
}

/* Responsive adjustments */
@media (max-width: 700px) {

  .hero-content {
    padding-left: 20px;
    padding-right: 20px;
  }

  .hero-title {
    font-size: clamp(2rem, 4vw, 3rem);
  }

  .hero-subtitle {
    font-size: 1.3rem !important;
  }


  .hero-title-wrapper {
    height: 2.4em;
    /* Double height for stacked layout */
  }

  .fixed-text {
    top: 0;
    transform: translateX(-50%);
    /* Center align */
  }

  .rotating-text-container {
    min-width: 200px;
    top: 1.2em;
    transform: translateX(-50%);
    text-align: center;
  }

}
</style>
]]></content>
          </file>
        
  </fileContents>
</projectContext>